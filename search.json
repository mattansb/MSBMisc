[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mattan S. Ben-Shachar. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"person (2022). MSBMisc: functions wrote find useful. R package version 0.0.1.14, https://mattansb.github.io/MSBMisc/.","code":"@Manual{,   title = {MSBMisc: Some functions I wrote that I find useful},   author = {{person}},   year = {2022},   note = {R package version 0.0.1.14},   url = {https://mattansb.github.io/MSBMisc/}, }"},{"path":"/index.html","id":"msbmisc","dir":"","previous_headings":"","what":"Some functions I wrote that I find useful","title":"Some functions I wrote that I find useful","text":"light weight package functions wrote . find useful - cool! fina bugs, let know! can see list functions .","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Some functions I wrote that I find useful","text":"can install package R-Universe:","code":"install.packages('MSBMisc', repos = 'https://mattansb.r-universe.dev')"},{"path":"/reference/Paste.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy / Paste as Comment / Roxygen — Paste","title":"Copy / Paste as Comment / Roxygen — Paste","text":"Adpated stla/pasteAsComment","code":""},{"path":"/reference/Paste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy / Paste as Comment / Roxygen — Paste","text":"","code":"Paste(prefix = \"#> \")  PasteRoxygen()  Copy(prefix = \"#> \")  CopyRoxygen()"},{"path":"/reference/Paste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy / Paste as Comment / Roxygen — Paste","text":"prefix prefix use copied text.","code":""},{"path":"/reference/R2.html","id":null,"dir":"Reference","previous_headings":"","what":"\\(R^2\\) Overkill — R2","title":"\\(R^2\\) Overkill — R2","text":"Way many ways calculate \\(R^2\\).","code":""},{"path":"/reference/R2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"\\(R^2\\) Overkill — R2","text":"","code":"R2(pred, obs, type = 1, na.rm = TRUE)"},{"path":"/reference/R2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"\\(R^2\\) Overkill — R2","text":"pred predicted values model; typically result call predict(). obs true observed values. type 8 versions R-square use. See details. na.rm logical value indicating whether NA values stripped computation proceeds.","code":""},{"path":"/reference/R2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"\\(R^2\\) Overkill — R2","text":"types \\(R^2\\): \\(R^2_1 = 1 - \\sum (y-\\hat{y})^2 / \\sum (y-\\bar{y})^2\\) \\(R^2_2 = \\sum (\\hat{y}-\\bar{y})^2 / \\sum (y-\\bar{y})^2\\) \\(R^2_3 = \\sum (\\hat{y}-\\bar{\\hat{y}})^2 / \\sum (y-\\bar{y})^2\\) \\(R^2_4 = 1 - \\sum (e-\\bar{e})^2 / \\sum (y-\\bar{y})^2\\) \\(R^2_5 = \\) squared multiple correlation coefficient regressand regressors \\(R^2_6 = r_{y,\\hat{y}}^2\\) \\(R^2_7 = 1 - \\sum (y-\\hat{y})^2 / \\sum y^2\\) \\(R^2_8 = \\sum \\hat{y}^2 / \\sum y^2\\)","code":""},{"path":"/reference/R2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"\\(R^2\\) Overkill — R2","text":"Kvålseth, T. O. (1985). Cautionary note R 2. American Statistician, 39(4), 279-285.","code":""},{"path":"/reference/R2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"\\(R^2\\) Overkill — R2","text":"","code":"X <-  c(1, 2, 3, 4, 5, 6) Y <- c(15, 37, 52, 59, 83, 92)  m1 <- lm(Y ~ X) m2 <- lm(Y ~ 0 + X) m3 <- lm(log(Y) ~ X)  # Table 2 from Kvålset0 (1985) data.frame(   mod1 = sapply(1:8, R2, pred = predict(m1), obs = Y),   mod2 = sapply(1:8, R2, pred = predict(m2), obs = Y),   mod3 = sapply(1:8, R2, pred = 16.3757 * X ^ 0.99, obs = Y) ) #>        mod1      mod2      mod3 #> 1 0.9808189 0.9776853 0.9777219 #> 2 0.9808189 1.0836003 1.0982588 #> 3 0.9808189 1.0829977 1.0982028 #> 4 0.9808189 0.9782880 0.9777779 #> 5        NA        NA        NA #> 6 0.9808189 0.9808189 0.9810793 #> 7 0.9966075 0.9960532 0.9960597 #> 8 0.9966075 0.9960532 1.0230915"},{"path":"/reference/age_in_unit.html","id":null,"dir":"Reference","previous_headings":"","what":"Age in some units — age_in_unit","title":"Age in some units — age_in_unit","text":"Age units","code":""},{"path":"/reference/age_in_unit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age in some units — age_in_unit","text":"","code":"age_in_unit(   DOB,   REFDATE = Sys.Date(),   years = TRUE,   months = TRUE,   weeks = TRUE,   days = TRUE )"},{"path":"/reference/age_in_unit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age in some units — age_in_unit","text":"DOB, REFDATE Two dates years, months, weeks, days units.","code":""},{"path":"/reference/age_in_unit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age in some units — age_in_unit","text":"","code":"DOB <- as.Date(\"1989-08-05\") TODAY <- Sys.Date() age_in_unit(DOB, TODAY) #> [1] \"33 years, 1 months, 0 weeks, 1 days\""},{"path":"/reference/bracketifyFile.html","id":null,"dir":"Reference","previous_headings":"","what":"bracketify — bracketifyFile","title":"bracketify — bracketifyFile","text":"Adpated stla/bracketify","code":""},{"path":"/reference/bracketifyFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bracketify — bracketifyFile","text":"","code":"bracketifyFile()  bracketifySelection()"},{"path":"/reference/chisq_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Follow-up for contingency table test — chisq_pairwise","title":"Follow-up for contingency table test — chisq_pairwise","text":"Follow-contingency table test","code":""},{"path":"/reference/chisq_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Follow-up for contingency table test — chisq_pairwise","text":"","code":"chisq_pairwise(   Xsq,   population_in_row = TRUE,   adjust = stats::p.adjust.methods,   effect_size = c(\"V\", \"phi\"),   ci = 0.95,   ... )  chisq_residual(   Xsq,   adjust = stats::p.adjust.methods,   res_type = c(\"pearson\", \"standardized\"),   ci = 0.95 )"},{"path":"/reference/chisq_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Follow-up for contingency table test — chisq_pairwise","text":"Xsq Result chisq.test() population_in_row Comparisons row? (, column.) adjust Method correcting p-values. See stats::p.adjust. effect_size Type effect size use. ci Confidence Interval (CI) level ... Passed chisq.test(). res_type Type residuals use.","code":""},{"path":"/reference/chisq_pairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Follow-up for contingency table test — chisq_pairwise","text":"","code":"M <- as.table(rbind(c(762, 327, 468),                     c(484, 239, 477))) dimnames(M) <- list(   gender = c(\"F\", \"M\"),   party = c(\"Democrat\", \"Independent\", \"Republican\") ) M #>       party #> gender Democrat Independent Republican #>      F      762         327        468 #>      M      484         239        477  res <- chisq.test(M) chisq_pairwise(res) #>   comparison   Chi.sq df         V   V.CI_low V.CI_high        p.raw #> 1    F vs. M 30.07015  2 0.1044358 0.07099983         1 2.953589e-07 #>         p.holm #> 1 2.953589e-07 chisq_pairwise(res, population_in_row = FALSE) #>                   comparison    Chi.sq df          V   V.CI_low V.CI_high #> 1   Democrat vs. Independent  1.717892  1 0.03200649 0.00000000         1 #> 2    Democrat vs. Republican 29.059545  1 0.11609430 0.08095396         1 #> 3 Independent vs. Republican  9.335659  1 0.07997241 0.03765674         1 #>          p.raw       p.holm #> 1 1.899646e-01 1.899646e-01 #> 2 7.018745e-08 2.105623e-07 #> 3 2.247373e-03 4.494746e-03  chisq_residual(res) #>   gender       party    z.value n.obs           d     d.CI_low   d.CI_high #> 1      F    Democrat  2.1988558   762  0.07965614  0.008654136  0.15065814 #> 2      M    Democrat -2.5046695   484 -0.11384861 -0.202937885 -0.02475934 #> 3      F Independent  0.4113702   327  0.02274882 -0.085637434  0.13113508 #> 4      M Independent -0.4685829   239 -0.03031011 -0.157089642  0.09646942 #> 5      F  Republican -2.8432397   468 -0.13142880 -0.222028170 -0.04082944 #> 6      M  Republican  3.2386734   477  0.14828867  0.058548084  0.23802926 #>         p.raw      p.holm #> 1 0.027888180 0.083664539 #> 2 0.012256586 0.049026346 #> 3 0.680801124 1.000000000 #> 4 0.639367769 1.000000000 #> 5 0.004465747 0.022328734 #> 6 0.001200870 0.007205219"},{"path":"/reference/compare_freqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare the frequencies of levels of a factor — compare_freqs","title":"Compare the frequencies of levels of a factor — compare_freqs","text":"Using stats::mcnemar.test comparing dependent proportions.  function dubious. Best use .","code":""},{"path":"/reference/compare_freqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare the frequencies of levels of a factor — compare_freqs","text":"","code":"compare_freqs(f, adjust = stats::p.adjust.methods, correct = TRUE)"},{"path":"/reference/compare_freqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare the frequencies of levels of a factor — compare_freqs","text":"f factor vector. adjust Method correcting p-values. See stats::p.adjust. correct logical indicating whether apply continuity correction computing test statistic.","code":""},{"path":"/reference/compare_freqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare the frequencies of levels of a factor — compare_freqs","text":"","code":"f <- c(   rep(\"A\", 12),   rep(\"B\", 45),   rep(\"C\", 42),   rep(\"D\", 20) )  compare_freqs(f) #> Warning: This is function is dubious. Best not to use it. #>   comparison     prop1     prop2      Chi.sq df        p.raw       p.holm #> 1  A  vs.  B 0.1008403 0.3781513 17.96491228  1 2.250146e-05 0.0001350088 #> 2  A  vs.  C 0.1008403 0.3529412 15.57407407  1 7.933499e-05 0.0003966749 #> 3  A  vs.  D 0.1008403 0.1680672  1.53125000  1 2.159249e-01 0.4318498779 #> 4  B  vs.  C 0.3781513 0.3529412  0.04597701  1 8.302176e-01 0.8302175918 #> 5  B  vs.  D 0.3781513 0.1680672  8.86153846  1 2.912420e-03 0.0116496803 #> 6  C  vs.  D 0.3529412 0.1680672  7.11290323  1 7.653106e-03 0.0229593194"},{"path":"/reference/contrast_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Contrast Weights — contrast_weights","title":"Build Contrast Weights — contrast_weights","text":"used ideally emmeans::contrast. contrasts tested (sum 0?) scaled positive weights sum 1 (negative weights -1).","code":""},{"path":"/reference/contrast_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Contrast Weights — contrast_weights","text":"","code":"contrast_weights(..., .name = \"custom\", .adjust = NULL)  cw(..., .name = \"custom\", .adjust = NULL)"},{"path":"/reference/contrast_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Contrast Weights — contrast_weights","text":"... Can : Unnamed scalars. (Possibly named) vectors equal length .name label appear results emmeans. .adjust Gives default adjustment method multiplicity (used emmeans).","code":""},{"path":"/reference/contrast_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Contrast Weights — contrast_weights","text":"Depending input, either vector data frame scaled weights.","code":""},{"path":"/reference/contrast_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Contrast Weights — contrast_weights","text":"","code":"data(mtcars)  mod <- lm(mpg ~ factor(cyl) * am, mtcars)   my_contrasts <- data.frame(\"squares\" = c(-1, 2, -1),                            \"4 vs 6\" = c(-30, 30, 0),                            check.names = FALSE)  (my_contrasts2 <- cw(my_contrasts)) #>   squares 4 vs 6 #> 1    -0.5     -1 #> 2     1.0      1 #> 3    -0.5      0 my_contrasts3 <- cw(my_contrasts, .adjust = \"fdr\")  library(emmeans) (emms <- emmeans(mod, ~ cyl + am)) #>  cyl am emmean    SE df lower.CL upper.CL #>    4  0   22.9 1.751 26     19.3     26.5 #>    6  0   19.1 1.516 26     16.0     22.2 #>    8  0   15.1 0.875 26     13.3     16.8 #>    4  1   28.1 1.072 26     25.9     30.3 #>    6  1   20.6 1.751 26     17.0     24.2 #>    8  1   15.4 2.144 26     11.0     19.8 #>  #> Confidence level used: 0.95   contrast(emms, method = my_contrasts, by = \"am\") #> am = 0: #>  contrast estimate    SE df t.ratio p.value #>  squares      0.30  3.61 26   0.083  0.9344 #>  4 vs 6    -113.25 69.48 26  -1.630  0.1152 #>  #> am = 1: #>  contrast estimate    SE df t.ratio p.value #>  squares     -2.34  4.24 26  -0.552  0.5858 #>  4 vs 6    -225.25 61.59 26  -3.658  0.0011 #>  contrast(emms, method = my_contrasts2, by = \"am\") # estimate is affected! #> am = 0: #>  contrast estimate   SE df t.ratio p.value #>  squares      0.15 1.80 26   0.083  0.9344 #>  4 vs 6      -3.77 2.32 26  -1.630  0.1152 #>  #> am = 1: #>  contrast estimate   SE df t.ratio p.value #>  squares     -1.17 2.12 26  -0.552  0.5858 #>  4 vs 6      -7.51 2.05 26  -3.658  0.0011 #>  contrast(emms, method = my_contrasts3, by = \"am\") # p value is affected #> am = 0: #>  contrast estimate   SE df t.ratio p.value #>  squares      0.15 1.80 26   0.083  0.9344 #>  4 vs 6      -3.77 2.32 26  -1.630  0.2303 #>  #> am = 1: #>  contrast estimate   SE df t.ratio p.value #>  squares     -1.17 2.12 26  -0.552  0.5858 #>  4 vs 6      -7.51 2.05 26  -3.658  0.0023 #>  #> P value adjustment: fdr method for 2 tests   # Also in interaction contrasts contrast(emms, interaction = list(cyl = my_contrasts2, am = \"pairwise\")) #>  cyl_custom am_pairwise estimate   SE df t.ratio p.value #>  squares    0 - 1           1.32 2.79 26   0.474  0.6393 #>  4 vs 6     0 - 1           3.73 3.09 26   1.206  0.2386 #>"},{"path":"/reference/crop_coord_polar.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop coord_polar — crop_coord_polar","title":"Crop coord_polar — crop_coord_polar","text":"Crop coord_polar","code":""},{"path":"/reference/crop_coord_polar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop coord_polar — crop_coord_polar","text":"","code":"crop_coord_polar(   plot,   start = 0,   end = 2 * pi,   padding = 0.02,   fix_aspect.ratio = TRUE )"},{"path":"/reference/crop_coord_polar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop coord_polar — crop_coord_polar","text":"plot ggplot start, end angular values (radians) marking plot starts ends. padding much padding add around crop? fix_aspect.ratio aspect ratio fixed?","code":""},{"path":"/reference/crop_coord_polar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crop coord_polar — crop_coord_polar","text":"function uses {ggtrace} June Choe, adapted twitter thread.","code":""},{"path":"/reference/crop_coord_polar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop coord_polar — crop_coord_polar","text":"","code":"library(ggplot2)  polar_plot <- ggplot(mtcars ,aes(hp, mpg)) +   geom_point() +   geom_smooth(method = \"lm\") +   expand_limits(y = c(0, 60)) +   coord_polar(start = 0, theta = \"y\")  crop_coord_polar(polar_plot, end = pi)  crop_coord_polar(polar_plot, end = pi/2)  crop_coord_polar(polar_plot, start = 3 * pi / 2, end = pi / 2)     # Also works with facets! d <- data.frame(   x = seq(1, 7, length = 6*5),   y = rnorm(6*5),   g = rep(letters[1:6], each = 5) )  polar_plot_facet <- ggplot(d, aes(x, y)) +   geom_point(aes(color = x), size = 2) +   facet_wrap(~g) +   scale_x_continuous(breaks = seq(0, 6), minor_breaks = NULL) +   coord_polar()  crop_coord_polar(polar_plot_facet, start = pi)   # Use multiple values - one for each facet: start <- seq(0, 5) * 2 * pi / 6 end <- start + start[2]  crop_coord_polar(polar_plot_facet,                  start = start, end = end)"},{"path":"/reference/dbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind matrices diagonally — dbind","title":"Bind matrices diagonally — dbind","text":"Bind matrices diagonally","code":""},{"path":"/reference/dbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind matrices diagonally — dbind","text":"","code":"dbind(..., .fill = NULL)"},{"path":"/reference/dbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind matrices diagonally — dbind","text":"... Matrices. .fill Value fill -\"diagonal\" values. NULL, value default value inputs' mode.","code":""},{"path":"/reference/dbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind matrices diagonally — dbind","text":"","code":"M1 <- matrix(1:8, 2, 4) M2 <- matrix(9:14, 2, 3) dbind(M1, M2) #>   1 2 3 4  5  6  7 #> 1 1 3 5 7  0  0  0 #> 2 2 4 6 8  0  0  0 #> 3 0 0 0 0  9 11 13 #> 4 0 0 0 0 10 12 14 dbind(M1, M2, .fill = NA) #>    1  2  3  4  5  6  7 #> 1  1  3  5  7 NA NA NA #> 2  2  4  6  8 NA NA NA #> 3 NA NA NA NA  9 11 13 #> 4 NA NA NA NA 10 12 14   M1 <- matrix(letters[1:4], 2, 2) M2 <- matrix(LETTERS[5:10], 3, 2) dbind(M1, M2) #>   1   2   3   4   #> 1 \"a\" \"c\" \"\"  \"\"  #> 2 \"b\" \"d\" \"\"  \"\"  #> 3 \"\"  \"\"  \"E\" \"H\" #> 4 \"\"  \"\"  \"F\" \"I\" #> 5 \"\"  \"\"  \"G\" \"J\" dbind(M1, M2, .fill = \"Banana\") #>   1        2        3        4        #> 1 \"a\"      \"c\"      \"Banana\" \"Banana\" #> 2 \"b\"      \"d\"      \"Banana\" \"Banana\" #> 3 \"Banana\" \"Banana\" \"E\"      \"H\"      #> 4 \"Banana\" \"Banana\" \"F\"      \"I\"      #> 5 \"Banana\" \"Banana\" \"G\"      \"J\"        M1 <- matrix(TRUE, 2, 3) M2 <- matrix(NA, 3, 4) dbind(M1, M2) #>       1     2     3     4     5     6     7 #> 1  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE #> 2  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE #> 3 FALSE FALSE FALSE    NA    NA    NA    NA #> 4 FALSE FALSE FALSE    NA    NA    NA    NA #> 5 FALSE FALSE FALSE    NA    NA    NA    NA"},{"path":"/reference/delta_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform means a (co)variances using the delta method — delta_method","title":"Transform means a (co)variances using the delta method — delta_method","text":"Transform means (co)variances using delta method","code":""},{"path":"/reference/delta_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform means a (co)variances using the delta method — delta_method","text":"","code":"delta_method(..., .means, .V, return = c(\"means\", \"cov\", \"stddev\", \"cor\"))"},{"path":"/reference/delta_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform means a (co)variances using the delta method — delta_method","text":"... Unquoted transformations. See example. .means named vector means. .V covariance matrix. return returned?","code":""},{"path":"/reference/delta_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform means a (co)variances using the delta method — delta_method","text":"list one (optionally named): means transformed variables. cov (co) variance matrix transformed variables. stddev standard deviations transformed variables (sqrt(diag(cov))). cor correlation matrix transformed variables. (cov2cor(cov))","code":""},{"path":"/reference/delta_method.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform means a (co)variances using the delta method — delta_method","text":"function mostly copied msm::deltamethod().","code":""},{"path":"/reference/delta_method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform means a (co)variances using the delta method — delta_method","text":"","code":"M <- sapply(mtcars, mean) V <- cov(mtcars)  delta_method(   (mpg^2)/hp, log_am = log1p(am),   .means = M, .V = V,   return = \"cor\" ) #> $cor #>            (mpg^2)/hp    log_am #> (mpg^2)/hp  1.0000000 0.4703339 #> log_am      0.4703339 1.0000000 #>   # Sobel Test ----  data(\"mtcars\") mod.y <- lm(mpg ~ hp + cyl, mtcars[1:5,]) mod.m <- lm(hp ~ cyl, mtcars[1:5,])  bhat <- c(coef(mod.y), coef(mod.m))[c(2,5)] Vhat <- dbind(vcov(mod.y), vcov(mod.m))[c(2,5), c(2,5)]  res <- delta_method(   hp * cyl,   .means = bhat, .V = Vhat,   return = c(\"means\", \"stddev\") )  res$means / res$stddev #>  hp * cyl  #> -1.641799   # Compare: (bhat[1] * bhat[2]) /   sqrt(bhat[1]^2 * Vhat[2,2] + bhat[2]^2 * Vhat[1,1]) #>        hp  #> -1.641799   # Special character will give you a bad time... m <- lm(mpg ~ factor(cyl), mtcars[1:5,])  bhat <- coef(m) names(bhat) <- c(\"cyl4\", \"cyl6\", \"cyl8\") V <- vcov(m)  delta_method(cyl4, cyl4 + cyl6, cyl4 + cyl8,              .means = bhat,              .V = V) #> $means #>        cyl4 cyl4 + cyl6 cyl4 + cyl8  #>    22.80000    21.13333    18.70000  #>  #> $cov #>                      cyl4   cyl4 + cyl6   cyl4 + cyl8 #> cyl4         5.333333e-02 -1.387779e-17 -1.387779e-17 #> cyl4 + cyl6 -1.387779e-17  1.777778e-02  0.000000e+00 #> cyl4 + cyl8 -1.387779e-17  0.000000e+00  5.333333e-02 #>  #> $stddev #>        cyl4 cyl4 + cyl6 cyl4 + cyl8  #>   0.2309401   0.1333333   0.2309401  #>  #> $cor #>                      cyl4   cyl4 + cyl6   cyl4 + cyl8 #> cyl4         1.000000e+00 -4.506944e-16 -2.602085e-16 #> cyl4 + cyl6 -4.506944e-16  1.000000e+00  0.000000e+00 #> cyl4 + cyl8 -2.602085e-16  0.000000e+00  1.000000e+00 #>"},{"path":"/reference/fa_reliability.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate reliability from E/CFA — fa_reliability","title":"Calculate reliability from E/CFA — fa_reliability","text":"Calculate reliability E/CFA","code":""},{"path":"/reference/fa_reliability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate reliability from E/CFA — fa_reliability","text":"","code":"fa_reliability(x, ...)  # S3 method for fa fa_reliability(x, keys = NULL, threshold = 0, labels = NULL, ...)  # S3 method for lavaan fa_reliability(x, ...)"},{"path":"/reference/fa_reliability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate reliability from E/CFA — fa_reliability","text":"x E/CFA model (e.g., result psych::fa() lavaan::cfa()). ... lavaan objects, arguments passed semTools::compRelSEM() keys optional, see ?psych::make.keys threshold values loadings used? used keys = NULL. labels optional factor labels","code":""},{"path":"/reference/fa_reliability.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate reliability from E/CFA — fa_reliability","text":"Brenton M. Wiernik","code":""},{"path":"/reference/fa_reliability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate reliability from E/CFA — fa_reliability","text":"","code":"if (FALSE) { # require(\"psych\") && require(\"GPArotation\") data(\"Harman74.cor\") EFA <- psych::fa(Harman74.cor$cov, 4)  fa_reliability(EFA) } if (FALSE) { # require(\"lavaan\") && require(\"semTools\") HS.model <- ' visual  =~ x1 + x2 + x3               textual =~ x4 + x5 + x6               speed   =~ x7 + x8 + x9 '  CFA <- lavaan::cfa(HS.model, data = lavaan::HolzingerSwineford1939)  fa_reliability(CFA)  }"},{"path":"/reference/get_data_for_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get raw data for plotting with model predictions — get_data_for_grid","title":"Get raw data for plotting with model predictions — get_data_for_grid","text":"Get raw data plotting model predictions","code":""},{"path":"/reference/get_data_for_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get raw data for plotting with model predictions — get_data_for_grid","text":"","code":"get_data_for_grid(grid, model, residualize = FALSE, collapse_by = FALSE, ...)  # S3 method for data.frame get_data_for_grid(   grid,   model,   residualize = FALSE,   collapse_by = FALSE,   pred_name,   ... )  # S3 method for ggeffects get_data_for_grid(   grid,   model,   residualize = FALSE,   collapse_by = FALSE,   protect_names = TRUE,   ... )  # S3 method for emmGrid get_data_for_grid(   grid,   model,   residualize = FALSE,   collapse_by = FALSE,   protect_names = TRUE,   ... )  # S3 method for predictions get_data_for_grid(grid, model, residualize = FALSE, collapse_by = FALSE, ...)"},{"path":"/reference/get_data_for_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get raw data for plotting with model predictions — get_data_for_grid","text":"grid data grid predictions model statistical model residualize data residualized? collapse_by Name grouping variable collaple across. TRUE name grouping variable automatically detected model. ... Args passed / functions. pred_name Name column predictions data grid protect_names Logical, TRUE, preserves column names ggeffects object.","code":""},{"path":"/reference/get_data_for_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get raw data for plotting with model predictions — get_data_for_grid","text":"","code":"data(\"mtcars\") mtcars <- mtcars |> transform(cyl = factor(cyl)) mod <- lm(mpg ~ hp + cyl, data = mtcars[1:10, ])  nd <- expand.grid(hp = seq(50, 350, by = 50),                   cyl = \"4\")  nd$predicted_mpg <- predict(mod, newdata = nd)  get_data_for_grid(nd, mod) #> Warning: 'get_data_for_grid()' is experimental. #>                    mpg  hp cyl #> Mazda RX4         21.0 110   6 #> Mazda RX4 Wag     21.0 110   6 #> Datsun 710        22.8  93   4 #> Hornet 4 Drive    21.4 110   6 #> Hornet Sportabout 18.7 175   8 #> Valiant           18.1 105   6 #> Duster 360        14.3 245   8 #> Merc 240D         24.4  62   4 #> Merc 230          22.8  95   4 #> Merc 280          19.2 123   6  get_data_for_grid(nd, mod, residualize = TRUE, pred_name = \"predicted_mpg\") #>                   cyl  hp predicted_mpg #> Mazda RX4           6 100      23.14580 #> Mazda RX4 Wag       6 100      23.14580 #> Datsun 710          4 100      22.39857 #> Hornet 4 Drive      6 100      23.54580 #> Hornet Sportabout   8 150      19.70311 #> Valiant             6 100      19.95907 #> Duster 360          8 250      13.58271 #> Merc 240D           4  50      25.08816 #> Merc 230            4 100      22.51327 #> Merc 280            6 100      22.09131  library(ggplot2) ggplot(nd, aes(hp, predicted_mpg)) +   geom_line() +   geom_point(aes(y = mpg, color = \"Raw\"),              data = get_data_for_grid(nd, mod)) +   geom_point(aes(color = \"Residualized\"),              data = get_data_for_grid(nd, mod, residualize = TRUE, pred_name = \"predicted_mpg\")) +   labs(title = \"Partial residual plot\",        color = \"Data\")   ## Support of data-grid packages ------ # - ggeffects # - emmeans # - marginaleffects pred_ggeffects <- ggeffects::ggpredict(mod, c(\"hp [50:350, by = 50]\", \"cyl [4]\")) get_data_for_grid(pred_ggeffects, residualize = TRUE) #>                   group   x predicted #> Mazda RX4             6 100  23.14580 #> Mazda RX4 Wag         6 100  23.14580 #> Datsun 710            4 100  22.39857 #> Hornet 4 Drive        6 100  23.54580 #> Hornet Sportabout     8 150  19.70311 #> Valiant               6 100  19.95907 #> Duster 360            8 250  13.58271 #> Merc 240D             4  50  25.08816 #> Merc 230              4 100  22.51327 #> Merc 280              6 100  22.09131  at <- list(hp = seq(50, 350, by = 50), cyl = \"4\") pred_emmeans <- emmeans::emmeans(mod, ~ hp + cyl, at = at) get_data_for_grid(pred_emmeans, mod, residualize = TRUE) #>                   cyl  hp   emmean #> Mazda RX4           6 100 23.14580 #> Mazda RX4 Wag       6 100 23.14580 #> Datsun 710          4 100 22.39857 #> Hornet 4 Drive      6 100 23.54580 #> Hornet Sportabout   8 150 19.70311 #> Valiant             6 100 19.95907 #> Duster 360          8 250 13.58271 #> Merc 240D           4  50 25.08816 #> Merc 230            4 100 22.51327 #> Merc 280            6 100 22.09131  # pred_marginaleffects <- marginaleffects::predictions(mod, newdata = nd) # get_data_for_grid(pred_marginaleffects, residualize = TRUE)   ## Collapes across group ------ fm1 <- lme4::lmer(angle ~ temperature + (1|recipe),                   data = cake)  pred_ggeffects <- ggeffects::ggpredict(fm1, c(\"temperature\", \"recipe\")) nd <- marginaleffects::datagrid(temperature = unique(cake$temperature),                                 model = fm1) pred_marginaleffects <- marginaleffects::predictions(fm1, newdata = nd)  get_data_for_grid(pred_marginaleffects, collapse_by = TRUE) #>   recipe predicted #> 1      A  33.12222 #> 2      B  31.64444 #> 3      C  31.60000 # get_data_for_grid(pred_marginaleffects, collapse_by = TRUE, residualize = TRUE)"},{"path":"/reference/gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare multiple vectors — gt","title":"Compare multiple vectors — gt","text":"Compare multiple vectors","code":""},{"path":"/reference/gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare multiple vectors — gt","text":"","code":"gt(...)  lt(...)  eq(...)  neq(...)  leq(...)  geq(...)  x %>>% y  x %<<% y  x %==% y  x %!=% y  x %<=% y  x %>=% y"},{"path":"/reference/gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare multiple vectors — gt","text":"x, y, ... Vectors, typically numerical, compared.","code":""},{"path":"/reference/gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare multiple vectors — gt","text":"logical vector. operator, last_y attribute stores last RHS values comparisons (strip away .vector()). See examples.","code":""},{"path":"/reference/gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare multiple vectors — gt","text":"","code":"x <- c(1, 3, 1, 1, 2) y <- c(2, 2, 1, 1, 1) z <- c(3, 1, 1, 2, 1)   lt(x, y, z) # > #> [1]  TRUE FALSE FALSE FALSE FALSE eq(x, y, z) # == #> [1] FALSE FALSE  TRUE FALSE FALSE neq(x, y, z) # != #> [1]  TRUE  TRUE FALSE FALSE FALSE leq(x, y, z) # <= #> [1]  TRUE FALSE  TRUE  TRUE FALSE geq(x, y, z) # >= #> [1] FALSE  TRUE  TRUE FALSE  TRUE  gt(x, y, z) # < #> [1] FALSE  TRUE FALSE FALSE FALSE  # same as x %>>% y %>>% z #> [1] FALSE  TRUE FALSE FALSE FALSE #> attr(,\"last_y \") #> [1] 3 1 1 2 1  # same as x > y & y > z #> [1] FALSE  TRUE FALSE FALSE FALSE  # Operators can be mixed!  x %>>% y %==% z #> [1] FALSE FALSE FALSE FALSE  TRUE #> attr(,\"last_y \") #> [1] 3 1 1 2 1  # Or broken (l1 <- x %>>% y) #> [1] FALSE  TRUE FALSE FALSE  TRUE #> attr(,\"last_y \") #> [1] 2 2 1 1 1  (l2 <- l1 %==% z) #> [1] FALSE FALSE FALSE FALSE  TRUE #> attr(,\"last_y \") #> [1] 3 1 1 2 1  # same as x > y & y == z #> [1] FALSE FALSE FALSE FALSE  TRUE  as.vector(l2) #> [1] FALSE FALSE FALSE FALSE  TRUE"},{"path":"/reference/has_any_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Test rowwise if each row is missing / has all data in select columns — has_any_data","title":"Test rowwise if each row is missing / has all data in select columns — has_any_data","text":"Test rowwise row missing / data select columns","code":""},{"path":"/reference/has_any_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test rowwise if each row is missing / has all data in select columns — has_any_data","text":"","code":"has_any_data(.data, ..., .name)  has_all_data(.data, ..., .name)  missing_any_data(.data, ..., .name)  missing_all_data(.data, ..., .name)"},{"path":"/reference/has_any_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test rowwise if each row is missing / has all data in select columns — has_any_data","text":".data data frame, data frame extension (e.g. tibble), lazy data frame (e.g. dbplyr dtplyr). See Methods, , details. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. .name Name new column logical index.","code":""},{"path":"/reference/has_any_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test rowwise if each row is missing / has all data in select columns — has_any_data","text":"","code":"data(mtcars)  mtcars[1, 1] <- NA mtcars[2, ] <- NA  mtcars[1:3, 1:3] |>   has_any_data(mpg:disp, .name = \"has_any\") |>   has_all_data(mpg:disp, .name = \"has_all\") |>   missing_any_data(mpg:disp, .name = \"missing_any\") |>   missing_all_data(mpg:disp, .name = \"missing_all\") #>                mpg cyl disp has_any has_all missing_any missing_all #> Mazda RX4       NA   6  160    TRUE   FALSE        TRUE       FALSE #> Mazda RX4 Wag   NA  NA   NA   FALSE   FALSE        TRUE        TRUE #> Datsun 710    22.8   4  108    TRUE    TRUE       FALSE       FALSE"},{"path":"/reference/index_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorised Extract and Replace from Matrix — index_matrix","title":"Vectorised Extract and Replace from Matrix — index_matrix","text":"Vectorised Extract Replace Matrix","code":""},{"path":"/reference/index_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorised Extract and Replace from Matrix — index_matrix","text":"","code":"index_matrix(x, ...)  # S3 method for matrix index_matrix(x, ...)  index_matrix(x, ...) <- value  # S3 method for matrix index_matrix(x, ...) <- value"},{"path":"/reference/index_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorised Extract and Replace from Matrix — index_matrix","text":"x matrix ... vectors indices (numeric char) value vector values replace","code":""},{"path":"/reference/index_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorised Extract and Replace from Matrix — index_matrix","text":"","code":"(M <- matrix(1:12, 3, 4)) #>      [,1] [,2] [,3] [,4] #> [1,]    1    4    7   10 #> [2,]    2    5    8   11 #> [3,]    3    6    9   12  index_matrix(M, 1:2, 3:4) # get values at (i = 1, j = 3) and (2, 4) #> [1]  7 11  # same as: c(M[1, 3], M[2, 4]) #> [1]  7 11  # replace values index_matrix(M, 1:2, 3:4) <- NA  M #>      [,1] [,2] [,3] [,4] #> [1,]    1    4   NA   10 #> [2,]    2    5    8   NA #> [3,]    3    6    9   12"},{"path":"/reference/is.TRUE.html","id":null,"dir":"Reference","previous_headings":"","what":"It's just logical — is.TRUE","title":"It's just logical — is.TRUE","text":"just logical","code":""},{"path":"/reference/is.TRUE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It's just logical — is.TRUE","text":"","code":"is.TRUE(x)  is.FALSE(x)  allTRUE(...)  anyTRUE(...)"},{"path":"/reference/is.TRUE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It's just logical — is.TRUE","text":"x, ... Values tested.","code":""},{"path":"/reference/is.TRUE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It's just logical — is.TRUE","text":"","code":"x <- list(1, TRUE, list(TRUE), FALSE, \"Hello world!\")  is.TRUE(x) #> [1] FALSE  TRUE FALSE FALSE FALSE  is.FALSE(x) #> [1] FALSE FALSE FALSE  TRUE FALSE  allTRUE(TRUE, FALSE, stop(\"NOOOO\")) #> [1] FALSE  anyTRUE(TRUE, FALSE, stop(\"NOOOO\")) #> [1] TRUE"},{"path":"/reference/lnorm_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to convert parameters of a log-normal distribution to meaningfull\nvalues on the response scale. — lnorm_mean","title":"Functions to convert parameters of a log-normal distribution to meaningfull\nvalues on the response scale. — lnorm_mean","text":"Functions convert parameters log-normal distribution meaningfull values response scale.","code":""},{"path":"/reference/lnorm_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to convert parameters of a log-normal distribution to meaningfull\nvalues on the response scale. — lnorm_mean","text":"","code":"lnorm_mean(meanlog, sdlog, ...)  lnorm_median(meanlog, ...)  lnorm_var(meanlog, sdlog, ...)  lnorm_sd(meanlog, sdlog, ...)"},{"path":"/reference/lnorm_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to convert parameters of a log-normal distribution to meaningfull\nvalues on the response scale. — lnorm_mean","text":"meanlog, sdlog mean standard deviation distribution     log scale default values 0 1 respectively. ... used","code":""},{"path":"/reference/lnorm_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to convert parameters of a log-normal distribution to meaningfull\nvalues on the response scale. — lnorm_mean","text":"","code":"x <- rlnorm(1e4, meanlog = 1.5, sdlog = 1.2)  m <- lm(log(x) ~ 1)  meanlog <- coef(m) sdlog <- sigma(m)  lnorm_mean(meanlog, sdlog) #> [1] 9.124234 mean(x) #> [1] 9.15371  lnorm_median(meanlog, sdlog) #> [1] 4.471301 median(x) #> [1] 4.47762  lnorm_sd(meanlog, sdlog) #> [1] 16.23021 sd(x) #> [1] 16.53203"},{"path":"/reference/logLik_lnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Information criteria for log-normal models — logLik_lnorm","title":"Information criteria for log-normal models — logLik_lnorm","text":"Log-likelihood (extension AIC BIC) log-normal models fit stats::lm(log(y) ~ ...) computed stats::dnorm(log(y), ...) instead stats::dlnorm(y, ...), makes comparing different families difficult. function aimed rectifying . See examples.","code":""},{"path":"/reference/logLik_lnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information criteria for log-normal models — logLik_lnorm","text":"","code":"logLik_lnorm(object, REML = FALSE)  AIC_lnorm(object, k = 2, REML = FALSE)  BIC_lnorm(object, REML = FALSE)"},{"path":"/reference/logLik_lnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information criteria for log-normal models — logLik_lnorm","text":"object fitted model object. model must meet following (throw error met): Gaussian likelihood identity link function. LHS model's formula must use log() function. weights (yet supported). REML FALSE supported. k numeric, penalty per parameter used;     default k = 2 classical AIC.","code":""},{"path":"/reference/logLik_lnorm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Information criteria for log-normal models — logLik_lnorm","text":"REML (yet) supported. Make sure comparing correct LL/AIC/BIC values.","code":""},{"path":"/reference/logLik_lnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information criteria for log-normal models — logLik_lnorm","text":"","code":"data(\"mtcars\") mtcars$mpg <- floor(mtcars$mpg)  model_lnorm <- lm(log(mpg) ~ factor(cyl), mtcars) model_norm <- lm(mpg ~ factor(cyl), mtcars) model_pois <- glm(mpg ~ factor(cyl), mtcars, family = poisson())  # No, that first one is wrong... (aics <- AIC(model_lnorm, model_norm, model_pois)) #>             df       AIC #> model_lnorm  4 -19.67061 #> model_norm   4 170.87527 #> model_pois   3 173.59104  aics[1, \"AIC\"] <- AIC_lnorm(model_lnorm) aics # better! #>             df      AIC #> model_lnorm  4 168.3652 #> model_norm   4 170.8753 #> model_pois   3 173.5910   # Should support any model really... ===================== model_lnorm <- lme4::lmer(log(mpg) ~ factor(cyl) + (1 | gear), mtcars, REML = FALSE) #> boundary (singular) fit: see help('isSingular') model_norm <- lme4::lmer(mpg ~ factor(cyl) + (1 | gear), mtcars, REML = FALSE) #> boundary (singular) fit: see help('isSingular') model_pois <- lme4::glmer(mpg ~ factor(cyl) + (1 | gear), mtcars, family = poisson()) #> boundary (singular) fit: see help('isSingular')  # No, that first one is wrong... (aics <- AIC(model_lnorm, model_norm, model_pois)) #>             df       AIC #> model_lnorm  5 -17.67061 #> model_norm   5 172.87527 #> model_pois   4 175.59104  aics[1, \"AIC\"] <- AIC_lnorm(model_lnorm) aics # better! #>             df      AIC #> model_lnorm  5 170.2152 #> model_norm   5 172.8753 #> model_pois   4 175.5910"},{"path":"/reference/php.t.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for Post-Hoc Power analysis — php.t","title":"Function for Post-Hoc Power analysis — php.t","text":"Based Lenth (2007) Post Hoc Power: Tables Commentary. php.guf() give's Lenth's grand unified formula post hoc power.","code":""},{"path":"/reference/php.t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for Post-Hoc Power analysis — php.t","text":"","code":"php.t(tval, p, df = Inf, alpha = 0.05)  php.F(Fval, p, df1, df2 = Inf, alpha = 0.05)  php.z(zval, p, alpha = 0.05)  php.chisq(chisqval, p, df, alpha = 0.05)  php.guf(p, alpha = 0.05)"},{"path":"/reference/php.t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for Post-Hoc Power analysis — php.t","text":"tval, zval, Fval, chisqval Observed test statistic p Observed p-value (used test statistic supplied) df, df1, df2 Test statistics' degrees freedom alpha Confidence level test.","code":""},{"path":"/reference/php.t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function for Post-Hoc Power analysis — php.t","text":"","code":"lm(hp ~ am, mtcars) |> summary() #>  #> Call: #> lm(formula = hp ~ am, data = mtcars) #>  #> Residuals: #>    Min     1Q Median     3Q    Max  #> -98.26 -51.51 -15.35  25.99 208.15  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   160.26      15.51  10.333 2.12e-11 *** #> am            -33.42      24.33  -1.373     0.18     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 67.6 on 30 degrees of freedom #> Multiple R-squared:  0.05915,\tAdjusted R-squared:  0.02779  #> F-statistic: 1.886 on 1 and 30 DF,  p-value: 0.1798 #>   php.t(p = 0.18, df = 30) #> [1] 0.2645363  php.guf(p = 0.18) #> [1] 0    # Table 1 expand.grid(   p = c(.001, .01, .05, .1, .25, .5, .75),   df = c(1, 2, 5, 10, 20, 50, 200, 1000, Inf) ) |>   transform(PHP = php.t(p = p, df = df)) |>   stats::reshape(direction = \"wide\",                  idvar = \"df\", timevar = \"p\") #>      df PHP.0.001  PHP.0.01  PHP.0.05   PHP.0.1  PHP.0.25    PHP.0.5   PHP.0.75 #> 1     1 1.0000000 1.0000000 0.6811954 0.3796619 0.1505611 0.07298889 0.05421092 #> 8     2 1.0000000 0.9921973 0.6147232 0.3730893 0.1619273 0.08037867 0.05615497 #> 15    5 0.9995752 0.8918535 0.5445532 0.3726519 0.1864002 0.09182502 0.05887572 #> 22   10 0.9843683 0.8144798 0.5210432 0.3743778 0.1977828 0.09730577 0.06018982 #> 29   20 0.9553336 0.7723470 0.5101846 0.3754240 0.2038380 0.10033499 0.06092576 #> 36   50 0.9289676 0.7473245 0.5040117 0.3760684 0.2075359 0.10223244 0.06139096 #> 43  200 0.9136834 0.7350546 0.5010250 0.3763890 0.2093948 0.10320124 0.06162983 #> 50 1000 0.9094128 0.7318178 0.5002398 0.3764739 0.2098912 0.10346170 0.06169421 #> 57  Inf 0.9083336 0.7310112 0.5000443 0.3764951 0.2100153 0.10352695 0.06171035   # Table 2 expand.grid(   p = c(.001, .01, .05, .1, .25, .5, .75),   df2 = c(1, 2, 5, 10, 20, 50, 200, 1000, Inf),   df1 = c(2, 3, 4, 10) ) |>   transform(PHP = php.F(p = p, df1 = df1, df2 = df2)) |>   stats::reshape(direction = \"wide\",                  idvar = c(\"df1\", \"df2\"), timevar = \"p\") #>      df2 df1 PHP.0.001  PHP.0.01  PHP.0.05   PHP.0.1  PHP.0.25    PHP.0.5 #> 1      1   2 1.0000000 0.9999994 0.6826910 0.3829361 0.1587031 0.08176220 #> 8      2   2 1.0000000 0.9932708 0.6325960 0.3942533 0.1823274 0.09633205 #> 15     5   2 0.9997970 0.9157359 0.5951373 0.4248532 0.2320135 0.12476697 #> 22    10   2 0.9899075 0.8526756 0.5865499 0.4443952 0.2614640 0.14267526 #> 29    20   2 0.9668058 0.8166045 0.5841959 0.4563401 0.2794409 0.15419082 #> 36    50   2 0.9436186 0.7949064 0.5835206 0.4641810 0.2913307 0.16208294 #> 43   200   2 0.9296226 0.7842643 0.5833992 0.4682801 0.2975878 0.16633041 #> 50  1000   2 0.9256607 0.7814617 0.5833914 0.4693924 0.2992914 0.16749843 #> 57   Inf   2 0.9246565 0.7807637 0.5833911 0.4696717 0.2997195 0.16779280 #> 64     1   3 1.0000000 0.9999994 0.6830637 0.3837461 0.1606670 0.08459055 #> 71     2   3 1.0000000 0.9936026 0.6385660 0.4014754 0.1896638 0.10284278 #> 78     5   3 0.9998634 0.9265754 0.6205251 0.4513766 0.2555210 0.14313502 #> 85    10   3 0.9926192 0.8746581 0.6256030 0.4864480 0.3006447 0.17300882 #> 92    20   3 0.9741348 0.8453681 0.6324077 0.5094815 0.3308774 0.19438033 #> 99    50   3 0.9545235 0.8281026 0.6381470 0.5252872 0.3520522 0.21007115 #> 106  200   3 0.9424008 0.8198082 0.6415127 0.5337638 0.3635749 0.21887644 #> 113 1000   3 0.9389439 0.8176491 0.6424672 0.5360888 0.3667570 0.22134244 #> 120  Inf   3 0.9380663 0.8171132 0.6427096 0.5366743 0.3675598 0.22196697 #> 127    1   4 1.0000000 0.9999994 0.6832279 0.3841023 0.1615214 0.08590456 #> 134    2   4 1.0000000 0.9937639 0.6415524 0.4051169 0.1934328 0.10633344 #> 141    5   4 0.9998941 0.9328804 0.6362907 0.4680605 0.2704904 0.15516125 #> 148   10   4 0.9942046 0.8893260 0.6528346 0.5161525 0.3289019 0.19570641 #> 155   20   4 0.9791553 0.8661605 0.6682758 0.5496167 0.3709345 0.22722036 #> 162   50   4 0.9627373 0.8533009 0.6804461 0.5734141 0.4017635 0.25171533 #> 169  200   4 0.9524757 0.8474523 0.6874205 0.5864360 0.4190025 0.26595886 #> 176 1000   4 0.9495426 0.8459757 0.6893832 0.5900372 0.4238183 0.27001090 #> 183  Inf   4 0.9487978 0.8456125 0.6898807 0.5909460 0.4250369 0.27104144 #> 190    1  10 1.0000000 0.9999994 0.6834885 0.3846668 0.1628646 0.08804004 #> 197    2  10 1.0000000 0.9940463 0.6469293 0.4117219 0.2003860 0.11301779 #> 204    5  10 0.9999431 0.9463167 0.6731161 0.5079007 0.3070554 0.18551251 #> 211   10  10 0.9973793 0.9265814 0.7289848 0.6018477 0.4140200 0.26793239 #> 218   20  10 0.9914645 0.9256232 0.7806107 0.6806704 0.5111326 0.35242534 #> 225   50  10 0.9859084 0.9310042 0.8225208 0.7434504 0.5946947 0.43358659 #> 232  200  10 0.9829889 0.9358578 0.8466730 0.7795634 0.6456645 0.48751559 #> 239 1000  10 0.9822496 0.9374121 0.8534301 0.7896737 0.6603487 0.50374349 #> 246  Inf  10 0.9820693 0.9378178 0.8551378 0.7922294 0.6640905 0.50793080 #>       PHP.0.75 #> 1   0.05925190 #> 8   0.06570212 #> 15  0.07744732 #> 22  0.08497148 #> 29  0.08991580 #> 36  0.09336124 #> 43  0.09523634 #> 50  0.09575463 #> 57  0.09588544 #> 64  0.06149594 #> 71  0.07078241 #> 78  0.09041739 #> 85  0.10538955 #> 92  0.11643991 #> 99  0.12476283 #> 106 0.12951812 #> 113 0.13086130 #> 120 0.13120228 #> 127 0.06268129 #> 134 0.07375255 #> 141 0.09954108 #> 148 0.12178921 #> 155 0.13979918 #> 162 0.15429556 #> 169 0.16294326 #> 176 0.16543420 #> 183 0.16606993 #> 190 0.06483326 #> 197 0.07986681 #> 204 0.12415628 #> 211 0.17833497 #> 218 0.23858442 #> 225 0.30153282 #> 232 0.34647984 #> 239 0.36054167 #> 246 0.36421246"},{"path":"/reference/print_library.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Loading/Attaching of Packages — print_library","title":"Print Loading/Attaching of Packages — print_library","text":"Useful RMarkdown.","code":""},{"path":"/reference/print_library.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Loading/Attaching of Packages — print_library","text":"","code":"print_library(..., .character.only = FALSE, .version = TRUE, .load = TRUE)  print_require(..., .character.only = FALSE, .version = TRUE, .load = TRUE)"},{"path":"/reference/print_library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Loading/Attaching of Packages — print_library","text":"... Names packages. .character.... characters? .version Print library version? .load Load package, just print?","code":""},{"path":"/reference/print_library.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Loading/Attaching of Packages — print_library","text":"","code":"print_library(afex, tidyverse, emmeans, MASS,               .load = FALSE) #> library(afex)      # 1.1.1 #> library(tidyverse) #  #> library(emmeans)   # 1.8.0 #> library(MASS)      # 7.3.57"},{"path":"/reference/qq_worm_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a worm plot — qq_worm_plot","title":"Create a worm plot — qq_worm_plot","text":"function wrapper around qqplotr::stat_pp_*(detrend = TRUE).","code":""},{"path":"/reference/qq_worm_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a worm plot — qq_worm_plot","text":"","code":"qq_worm_plot(x, distribution = \"norm\", ...)"},{"path":"/reference/qq_worm_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a worm plot — qq_worm_plot","text":"x numerical vector distribution Name distribution, matching d*, p* q* function names. ... Args passed d*, p* q* functions.","code":""},{"path":"/reference/qq_worm_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a worm plot — qq_worm_plot","text":"related tweets.","code":""},{"path":"/reference/qq_worm_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a worm plot — qq_worm_plot","text":"","code":"x <- rnorm(100) qq_worm_plot(x)   x <- rbeta(100, shape1 = 2, shape2 = 3) qq_worm_plot(x, distribution = \"beta\", shape1 = 2, shape2 = 3)   x <- rt(100, df = 3) qq_worm_plot(x, distribution = \"t\", df = 3)   # x <- rexp(100) # qq_worm_plot(x, distribution = \"exp\")  # x <- rpois(100, lambda = 15) # qq_worm_plot(x, distribution = \"pois\", lambda = 15)  # x <- runif(100) # qq_worm_plot(x, distribution = \"unif\")"},{"path":"/reference/r_SB.html","id":null,"dir":"Reference","previous_headings":"","what":"Spearman-Brown Split half reliability — r_SB","title":"Spearman-Brown Split half reliability — r_SB","text":"Spearman-Brown Split half reliability","code":""},{"path":"/reference/r_SB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spearman-Brown Split half reliability — r_SB","text":"","code":"r_SB(x, y = NULL, var.equal = TRUE)"},{"path":"/reference/r_SB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spearman-Brown Split half reliability — r_SB","text":"x correlation numeric vector y numeric vector var.equal Assume equal var x y? (ignored y NULL)","code":""},{"path":"/reference/r_SB.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spearman-Brown Split half reliability — r_SB","text":"","code":"r_SB(1:30,-exp(1/1:30), var.equal = TRUE) #> [1] 0.7207338  r_SB(1:30,-exp(1/1:30), var.equal = FALSE) #> [1] 0.07863447  r_SB(0.57) #> [1] 0.7261146"},{"path":"/reference/seq_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence Generation Based on the Values of a Vector — seq_range","title":"Sequence Generation Based on the Values of a Vector — seq_range","text":"Sequence Generation Based Values Vector","code":""},{"path":"/reference/seq_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence Generation Based on the Values of a Vector — seq_range","text":"","code":"seq_range(   x,   length.out = NULL,   by = NULL,   along.with = NULL,   na.rm = TRUE,   padding = 0.05 )  seq_quantile(   x,   probs,   length.out = NULL,   by = NULL,   along.with = NULL,   na.rm = TRUE )  seq_IQR(x, length.out = NULL, by = NULL, along.with = NULL, na.rm = TRUE)  mean_sd(x, na.rm = TRUE, out = c(\"vector\", \"data.frame\"))  median_mad(x, na.rm = TRUE, out = c(\"vector\", \"data.frame\"))"},{"path":"/reference/seq_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence Generation Based on the Values of a Vector — seq_range","text":"x numeric vector length.desired length sequence. arguments valued, defaults 20. number: increment sequence. along.take length length argument. na.rm logical evaluating TRUE FALSE     indicating whether NA values stripped     computation proceeds. padding Padding factor range. probs numeric vector probabilities values     \\([0,1]\\).  (Values 2e-14 outside     range accepted moved nearby endpoint.) \"data.frame\" can used summary function ggplot2.","code":""},{"path":"/reference/seq_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence Generation Based on the Values of a Vector — seq_range","text":"","code":"set.seed(1) x <- rt(100, df = 3) seq_range(x, length.out = 5) #> [1] -8.0437647 -4.4893708 -0.9349769  2.6194170  6.1738109 seq_IQR(x, length.out = 5) #> [1] -0.68605240 -0.32010195  0.04584849  0.41179894  0.77774938 seq_quantile(x, c(.05, .95), length.out = 5) #> [1] -2.1238314 -0.9386960  0.2464393  1.4315747  2.6167101  mean_sd(x) #>          -SD         Mean          +SD  #> -1.549678560  0.003624249  1.556927057   library(ggplot2) ggplot(mtcars, aes(cyl, mpg)) +   stat_summary(aes(color = \"Mean (SD)\"), fun.data = mean_sd,                fun.args = list(out = \"data.frame\")) +   stat_summary(aes(color = \"Median (MAD)\"), fun.data = median_mad,                fun.args = list(out = \"data.frame\"),                position = position_nudge(x = 0.5))"},{"path":"/reference/simple_effects.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Simple Effects Omnibus Tests — simple_effects","title":"Compute Simple Effects Omnibus Tests — simple_effects","text":"wrapper emmeans::joint_tests() provides easy way specify simple effects wish test, within variable(s).","code":""},{"path":"/reference/simple_effects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Simple Effects Omnibus Tests — simple_effects","text":"","code":"simple_effects(model, effect, inside, ...)"},{"path":"/reference/simple_effects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Simple Effects Omnibus Tests — simple_effects","text":"model model. effect name required simple effect. e.g., \"\" simple effect , \":B\" simple --B interaction. inside vector name(s) variable(s) within whose levels effect tested. Can also name interaction (e.g., \"B:C\"). specified, use terms effect. ... Passed emmeans::joint_tests(), e.g., cov.reduce, , etc.","code":""},{"path":"/reference/simple_effects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Simple Effects Omnibus Tests — simple_effects","text":"","code":"library(afex) #> ************ #> Welcome to afex. For support visit: http://afex.singmann.science/ #> - Functions for ANOVAs: aov_car(), aov_ez(), and aov_4() #> - Methods for calculating p-values with mixed(): 'S', 'KR', 'LRT', and 'PB' #> - 'afex_aov' and 'mixed' objects can be passed to emmeans() for follow-up tests #> - NEWS: emmeans() for ANOVA models now uses model = 'multivariate' as default. #> - Get and set global package options with: afex_options() #> - Set orthogonal sum-to-zero contrasts globally: set_sum_contrasts() #> - For example analyses see: browseVignettes(\"afex\") #> ************ #>  #> Attaching package: ‘afex’ #> The following object is masked from ‘package:lme4’: #>  #>     lmer  data(obk.long, package = \"afex\") A <- aov_car(value ~ treatment * gender + Error(id/(phase*hour)),              data = obk.long) #> Contrasts set to contr.sum for the following variables: treatment, gender  simple_effects(A, effect = \"treatment\") #> phase = fup, hour = X1: #>  gender df1 df2 F.ratio p.value #>  F        2  10   2.510  0.1308 #>  M        2  10   5.561  0.0238 #>  #> phase = post, hour = X1: #>  gender df1 df2 F.ratio p.value #>  F        2  10   1.627  0.2446 #>  M        2  10   6.363  0.0165 #>  #> phase = pre, hour = X1: #>  gender df1 df2 F.ratio p.value #>  F        2  10   0.458  0.6454 #>  M        2  10   1.737  0.2251 #>  #> phase = fup, hour = X2: #>  gender df1 df2 F.ratio p.value #>  F        2  10   9.720  0.0045 #>  M        2  10  13.600  0.0014 #>  #> phase = post, hour = X2: #>  gender df1 df2 F.ratio p.value #>  F        2  10   0.770  0.4884 #>  M        2  10   4.717  0.0361 #>  #> phase = pre, hour = X2: #>  gender df1 df2 F.ratio p.value #>  F        2  10   0.166  0.8495 #>  M        2  10   1.278  0.3205 #>  #> phase = fup, hour = X3: #>  gender df1 df2 F.ratio p.value #>  F        2  10   2.051  0.1793 #>  M        2  10   6.105  0.0185 #>  #> phase = post, hour = X3: #>  gender df1 df2 F.ratio p.value #>  F        2  10   0.417  0.6702 #>  M        2  10   2.824  0.1066 #>  #> phase = pre, hour = X3: #>  gender df1 df2 F.ratio p.value #>  F        2  10   1.087  0.3741 #>  M        2  10   0.883  0.4433 #>  #> phase = fup, hour = X4: #>  gender df1 df2 F.ratio p.value #>  F        2  10   5.994  0.0195 #>  M        2  10   5.000  0.0312 #>  #> phase = post, hour = X4: #>  gender df1 df2 F.ratio p.value #>  F        2  10   1.234  0.3319 #>  M        2  10   5.524  0.0242 #>  #> phase = pre, hour = X4: #>  gender df1 df2 F.ratio p.value #>  F        2  10   0.000  1.0000 #>  M        2  10   0.831  0.4635 #>  #> phase = fup, hour = X5: #>  gender df1 df2 F.ratio p.value #>  F        2  10   1.401  0.2908 #>  M        2  10   2.534  0.1287 #>  #> phase = post, hour = X5: #>  gender df1 df2 F.ratio p.value #>  F        2  10   1.761  0.2213 #>  M        2  10   5.282  0.0272 #>  #> phase = pre, hour = X5: #>  gender df1 df2 F.ratio p.value #>  F        2  10   0.185  0.8339 #>  M        2  10   2.332  0.1475 #>  #> Omnibus test for simple-simple-simple effect of treatment. #>    simple_effects(A, effect = \"treatment:phase\") #> hour = X1: #>  gender df1 df2 F.ratio p.value #>  F        4  10   3.403  0.0529 #>  M        4  10   1.034  0.4363 #>  #> hour = X2: #>  gender df1 df2 F.ratio p.value #>  F        4  10   3.346  0.0552 #>  M        4  10   2.443  0.1149 #>  #> hour = X3: #>  gender df1 df2 F.ratio p.value #>  F        4  10   2.687  0.0934 #>  M        4  10   1.408  0.3001 #>  #> hour = X4: #>  gender df1 df2 F.ratio p.value #>  F        4  10   3.155  0.0640 #>  M        4  10   0.758  0.5753 #>  #> hour = X5: #>  gender df1 df2 F.ratio p.value #>  F        4  10   0.686  0.6178 #>  M        4  10   2.044  0.1638 #>  #> Omnibus test for simple-simple effect of treatment:phase. #>    simple_effects(A, effect = \"phase\", inside = \"treatment\") #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 2.06567e-19 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 3.67534e-19 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.40043e-19 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.03889e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 9.86756e-20 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.37789e-18 #>  treatment df1 df2 F.ratio p.value #>  control     2  10   0.142  0.8693 #>  A           2  10   9.119  0.0056 #>  B           2  10  28.272  0.0001 #>  #> Omnibus test for simple effect of phase. #>    simple_effects(A, effect = \"phase\", inside = c(\"treatment\", \"gender\")) #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 5.36978e-19 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.10019e-17 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.21249e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.43614e-17 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 8.60451e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 8.61359e-20 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.27793e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 7.11874e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 6.48829e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 2.66086e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.14801e-17 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.44236e-18 #> gender = F: #>  treatment df1 df2 F.ratio p.value #>  control     2  10   0.416  0.6708 #>  A           2  10   4.079  0.0507 #>  B           2  10  18.728  0.0004 #>  #> gender = M: #>  treatment df1 df2 F.ratio p.value #>  control     2  10   1.823  0.2114 #>  A           2  10   5.248  0.0276 #>  B           2  10  11.015  0.0030 #>  #> Omnibus test for simple-simple effect of phase. #>   # simple_effects(A, effect = \"phase\", inside = \"treatment:gender\") # same  simple_effects(A, effect = \"phase\", inside = c(\"treatment\", \"gender\"),                at = list(gender = \"F\")) #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 5.36978e-19 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.10019e-17 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.21249e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.27793e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 7.11874e-18 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 6.48829e-18 #> gender = F: #>  treatment df1 df2 F.ratio p.value #>  control     2  10   0.416  0.6708 #>  A           2  10   4.079  0.0507 #>  B           2  10  18.728  0.0004 #>  #> Omnibus test for simple-simple effect of phase. #>    simple_effects(A, effect = \"phase:treatment\", inside = \"gender\") #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 2.29602e-20 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 1.48356e-19 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 4.20904e-20 #> Error in solve.default(zcov, z) :  #>   system is computationally singular: reciprocal condition number = 4.86218e-20 #>  gender df1 df2 F.ratio p.value #>  F        4  10   4.498  0.0245 #>  M        4  10   1.930  0.1819 #>  #> Omnibus test for simple effect of phase:treatment. #>"},{"path":"/reference/simple_mediation_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot simple mediations with tidySEM — simple_mediation_plot","title":"Plot simple mediations with tidySEM — simple_mediation_plot","text":"Plot simple mediations tidySEM","code":""},{"path":"/reference/simple_mediation_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot simple mediations with tidySEM — simple_mediation_plot","text":"","code":"simple_mediation_plot(   a = NA,   b = NA,   direct = NA,   indirect = NA,   total = NA,   X_name = \"X\",   M_name = \"M\",   Y_name = \"Y\",   ... )"},{"path":"/reference/simple_mediation_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot simple mediations with tidySEM — simple_mediation_plot","text":", b, direct, indirect, total Values labels put paths (edges). X_name, M_name, Y_name Values labels put variables (nodes). ... Passed tidySEM::prepare_graph.","code":""},{"path":"/reference/simple_mediation_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot simple mediations with tidySEM — simple_mediation_plot","text":"","code":"mod_a <- lm(hp ~ gear, data = mtcars) mod_bc <- lm(mpg ~ hp + gear, data = mtcars)  a <- coef(mod_a)[2] b <- coef(mod_bc)[2] direct <- coef(mod_bc)[3] indirect <- a * b total <- direct + indirect  med_plot <- simple_mediation_plot(   a = round(a, 3),   b = round(b, 3),   direct = round(direct, 3),   indirect = round(indirect, 3),   total = round(total, 3),   X_name = \"Gears\",   M_name = \"Horse\\nPower\",   Y_name = \"Miles\\nPer Gallon\" )  plot(med_plot)"},{"path":"/reference/stat_demo_apps.html","id":null,"dir":"Reference","previous_headings":"","what":"Some stats demos — stat_demo_apps","title":"Some stats demos — stat_demo_apps","text":"stats demos","code":""},{"path":"/reference/stat_demo_apps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some stats demos — stat_demo_apps","text":"","code":"stat_demo_apps(   demo = c(\"paired ttest\", \"truncated correlation\", \"berksons paradox\") )"},{"path":"/reference/stat_demo_apps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Some stats demos — stat_demo_apps","text":"demo demo show? (Partial matching supported)","code":""},{"path":[]},{"path":"/reference/stat_demo_apps.html","id":"paired-ttest","dir":"Reference","previous_headings":"","what":"paired ttest","title":"Some stats demos — stat_demo_apps","text":"Shows paired vs un-paired ttest, differences affected correlation.","code":""},{"path":"/reference/stat_demo_apps.html","id":"truncated-correlation","dir":"Reference","previous_headings":"","what":"truncated correlation","title":"Some stats demos — stat_demo_apps","text":"Demo truncation affects correlations affect MSE.","code":""},{"path":"/reference/stat_demo_apps.html","id":"berksons-paradox","dir":"Reference","previous_headings":"","what":"berksons paradox","title":"Some stats demos — stat_demo_apps","text":"Demo sampling bias can affect estimated correlations effects. See related Numberphile video.","code":""},{"path":"/reference/vlookup.html","id":null,"dir":"Reference","previous_headings":"","what":"vlookup — vlookup","title":"vlookup — vlookup","text":"vlookup","code":""},{"path":"/reference/vlookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vlookup — vlookup","text":"","code":"vlookup(this, data, key, value, add = FALSE)"},{"path":"/reference/vlookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vlookup — vlookup","text":"vector values data data frame search key looked ? value Name column values returned. add resulting values returned data frame? (Else vector)","code":""},{"path":"/reference/vlookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"vlookup — vlookup","text":"","code":"df <- data.frame(a = letters[c(1,1:9)],                  b = 51:60)  vlookup(c(\"a\", \"e\", \"c\"), df, key = \"a\", value = \"b\") #> Warning: Found more than 1 match. Returning the first. #>  a  e  c  #> 51 56 54  vlookup(c(\"a\", \"e\", \"c\"), df, key = \"a\", value = \"b\", add = TRUE) #> Warning: Found more than 1 match. Returning the first. #>   a  b #> a a 51 #> e e 56 #> c c 54"}]
